#!/usr/bin/env pinpoint

# Author: Luis Menina (liberforce)
# License: CC BY 4.0+

[font=Sans 100px]
#[text-color=black]
[text-align=center]
--

Créer une application:

le guide incomplet…
mais pratique quand même
-- [text-align=left]
<span foreground="red">Luis Menina</span>

• 2002 : Ingénieur (filière apprentissage)
• 2003 : Windows → GNU/Linux
• 2014 : Développeur et intégrateur pour Peaks
--
À la base de chaque application :

-- [idea.jpg][fill][top-left]
idée
-- [conception.jpg][fill][left]
conception
-- [source-code.jpg][fill][top-right]
implémentation
-- [text-align=left]
<tt>#include &lt;stdio.h&gt;

int main (int argc, char *argv[])
{
    printf ("Hello, World !");
    return 0;
}</tt>

-- [font=monospace 100px][text-align=left]
./hello-world
Hello, World !
-- [money.jpg][fill]
profit !
\#penelope
--
Simple, et pourtant…
--
… impossible sans
<span foreground="red" font-weight="bold">outils</span>
--
Même pour une application triviale,
vous aurez utilisé…
-- [text-align=left][toolbox.png][bottom]
• éditeur de texte
• langage de programmation
• compilateur/interpréteur
• système d'exploitation
--
<span foreground="red"><big>« Il est tentant, quand on n'a
pour seul outil un marteau,
de tout traiter comme un clou »</big></span>


<small>— Abraham Maslow
The Psychology of Science:
A Reconnaissance
(1966)</small>
-- [toolbox.png][fill][bottom]
Trouvez <i>vos</i> outils
-- [troll.jpg][bottom]
30 langages = 30 marteaux
-- [keyboard.jpg][fill]
L'éditeur de texte
--
<span foreground="red">Indépendant</span>

Vim
Emacs
SublimeText
Notepad++
etc.
--
<span foreground="red">Intégré dans un IDE</span>

Eclipse
Visual Studio
Code::Blocks
GNOME Builder
etc.
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

coloration syntaxique
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

marque-pages
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

indentation automatique
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

macros
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

remplacement de texte
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

multi-documents
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

sélection rectangulaire
--
<span foreground="red">Ce qu'on attend d'un éditeur</span>

extensible
--
<b>Bonnes pratiques d'édition :</b>
--
<span foreground="red">Respectez les conventions
du document que vous éditez…</span>
--
<span foreground="red">…ou adoptez les conventions du langage</span>

Python PEP8: <small>https://www.python.org/dev/peps/pep-0008/</small>
-- [text-align=left]
<span foreground="red">Respectez l'indentation</span>

→ configurez votre éditeur !

• facilite la lecture des diffs
• évite l'attribution
• sémantiquement important
# Python, Makefile
-- [toolbox.png][fill][bottom]
+1
-- [programming-languages.jpg][fill]
Langages
--
<span foreground="red">Choix du langage</span>

le plus adapté… parmi ceux que maîtrisez
--
<span foreground="red">Contraintes</span>

Quelle plate-forme(s) logicielle(s) ?
# Windows ? GNU/Linux ? macOS ?
# iOS ? Android ? …
# Navigateur Web ?

Quelle version(s) de plate-forme ?
# Windows 10 ? Fedora 25 ? …

Quelle plate-forme(s) matérielle(s) ?
# x86 ? ARM ? …
--
<span foreground="red">Quel usage ?</span>

portabilité
performance
maintenance
écosystème
--
<span foreground="red">Quel langage… compilé ?</span>

cible différente de l'hôte ?
	→ compilation croisée
# C, C++, Java, …
--
<span foreground="red">Quel langage… interprété ?</span>

# javascript, python, perl, …
--
<span foreground="red">Quelle version de standard ?</span>

<span foreground="red">C++</span>: C++98, C+03, C++11
<span foreground="red">C</span>: C89, C99, C11
<span foreground="red">Python</span>: 2.7, 3.x
--
etc.
--
Occasion d'apprendre
un nouveau langage ?
-- [librsvg-logo.png][bottom]
https://git.gnome.org/browse/librsvg/
-- [federico.jpg][fill][bottom-left][text-align=left][shading-opacity=0.000000]
<span foreground="red">C
2001
Federico
XML → bitmap</span>
--
<span foreground="red"><big>Migration C → Rust</big></span>

<span foreground="brown">oxydation</span>

<small>https://people.gnome.org/~federico/news-2016-10.html#25</small>
--
<span foreground="red">C</span>

langage difficile
gestion mémoire
sécurité (buffer overflow)
-- [text-align=left]
<span foreground="red">C : risques</span>
fichiers mal formés :
→ crash
→ faille de sécurité

<b>Critique en production</b>
--
<span foreground="red">Rust</span>

soutenu par Mozilla et Samsung
utilisé dans Firefox (Servo, Quantum)
# Mozilla Servo (moteur de rendu, projet de recherche)
# Quantum (merge de Servo dans Gecko)
# https://wiki.mozilla.org/Quantum

https://www.rust-lang.org/fr/
--
<span foreground="red">Objectifs de Rust</span>

parallélisme
gestion mémoire
# pas de null, pas de ramasse miettes
sécurité
-- [text-align=left]
<tt>fn main() {
    println!("Hello, Rust!");
}</tt>
--
<span foreground="red">Migration → Rust</span>

intégrable dans du code C
migration par morceaux
--
<span foreground="red">« Vous n'avez pas besoin de tout réécrire en une fois.
Je ne connais pas d'autre langage qui permette cela. »</span>

<small><i>— Federico Mena Quintero, 2016</i></small>
--
IoT ?
--
<b>Bonnes pratiques de codage :</b>
--
<span foreground="red">Respectez la casse</span>

snake_case
CamelCase
mixedCase
--
<span foreground="red">Respectez le codage (charset)</span>

<tt>printf (<span foreground="violet">"©o®ação = ♥"</span>);</tt>

<big>UTF-8</big> vs <small><s>ISO 8859-1</s></small>
--
<span foreground="red">Écrivez du code portable</span>

<small><i>(essayez)</i></small>

chemins du système de fichiers
# os.path.join()
# g_build_path() via glib
--
<span foreground="red">Respectez la langue</span>

fonctions
variables
commentaires

<big><b>en anglais !</b></big>
-- [text-align=left]
→ plus court
→ plus facile à diffuser (S.O ☺)
→ maintenable
-- [libreoffice-german-comments.png]
LibreOffice
-- [white][libreoffice-origins.png][bottom]
32 ans !
-- [trump.png][fill]
<b>Anglais US</b>
--
<b>Mantras du développeur</b>
-- [font=monospace 100px][text-align=left]
<span foreground='red' font-weight='bold'>D</span>on't
<span foreground='red' font-weight='bold'>R</span>epeat
<span foreground='red' font-weight='bold'>Y</span>ourself
# générateur de release notes
-- [font=monospace 100px][text-align=left]
<span foreground='red' font-weight='bold'>K</span>eep
<span foreground='red' font-weight='bold'>I</span>t
<span foreground='red' font-weight='bold'>S</span>imple
<span foreground='red' font-weight='bold'>S</span>tupid
# héritage multiple RATP
-- [font=monospace 100px][text-align=left]
<span foreground='red' font-weight='bold'>N</span>ot
<span foreground='red' font-weight='bold'>I</span>nvented
<span foreground='red' font-weight='bold'>H</span>ere
# réimplémenter ses formats de date
# listes chaînées
--
<span foreground="red">Zen of Python</span>

https://www.python.org/dev/peps/pep-0020/
-- [toolbox.png][fill][bottom]
+1
-- [git-branching-model.png][fill]
Systèmes de gestion de version
-- [text-align=left][poll.png][fill]
<span foreground="red">Sondage !</span>

✔ CVS
✔ Subversion (SVN)
✔ Git
✔ Perforce
✔ Mercurial
✔ PVCS
✔ Microsoft SourceSafe
✔ Rationale Synergy
✔ cpold
-- [joel.jpg][bottom]
<span foreground="red">Joel Spolsky</span>

http://french.joelonsoftware.com/Articles/TheJoelTest.html
-- [text-align=left]
<span foreground="red" font-weight="bold"><big>Le test de Joël</big></span>

<span foreground="red"><big>1. Utilisez-vous un système de gestion de code source ?</big></span>
<small>
2. Pouvez-vous faire un build en une seule étape ?
3. Faites-vous des builds quotidiens ?
4. Avez-vous une base de données de bugs ?
5. Corrigez-vous vos bugs avant d'écrire du nouveau code ?
6. Avez-vous un planning à jour ?
7. Avez-vous une spec ?
8. Les programmeurs bénéficient-ils d'un environnement de travail calme ?
9. Utilisez-vous les meilleurs outils que vous puissiez vous payer ?
10. Avez-vous des testeurs ?
11. Les candidats écrivent-ils du code pendant leur entretien d'embauche ?
12. Faites-vous des tests d'utilisabilité de couloir ?
</small>
--
<span foreground="red">Définitions</span>

checkout/clone
# Récupération des données du serveur
commit
# Enregistre des modifications
branch
# Crée une nouvelle version indépendante
merge
# Fusionne les modifications de 2 branches
--
<span foreground="red">Systèmes centralisés (SVN)</span>

serveur et réseau critiques
# Single Point Of Failure
distant = lent (latence, débit)
1 → n
# latence -> opérations lentes
# téléchargements lents -> mirroir SVN

# merge impossible
# commit impossible
--
<span foreground="red">Systèmes décentralisés (Git)</span>

-- [git.png][bottom]
https://git-scm.com/
-- [linus.jpg][fill][top-left][text-align=left]
<span foreground="red">Linus
1991: Linux
2005: git</span>
--
<span foreground="red">Git : avantages</span>

local = rapide
agilité
branches multiples
merge facilité
1 → n ou n → n
--
<span foreground="red">Git : bonus</span>

interopérabilité SVN (git-svn)
chaque clone est une sauvegarde
workflow de petits commits
--
<span foreground="red">☹ Git</span>

plus grande complexité
développeur → intégrateur
gros binaires
# utilisez plutôt git-annex
-- [text-align=left]
<span foreground="red">Git: créer un dépôt</span>
# au début de votre prochain entretien technique

<tt>git init
git add .
git commit</tt>
--
<b>Bonnes pratiques gestion de version :</b>
--
diff avant commit !
-- [angry-linus.jpg][fill][bottom]
+1
-- [construction.jpg][fill]
Systèmes de construction
-- [text-align=left]
<span foreground="red" font-weight="bold"><big>Le test de Joël</big></span>

<small>1. Utilisez-vous un système de gestion de code source ?</small>

<span foreground="red"><big>2. Pouvez-vous faire un build en une seule étape ?</big></span>

<small>3. Faites-vous des builds quotidiens ?
4. Avez-vous une base de données de bugs ?
5. Corrigez-vous vos bugs avant d'écrire du nouveau code ?
6. Avez-vous un planning à jour ?
7. Avez-vous une spec ?
8. Les programmeurs bénéficient-ils d'un environnement de travail calme ?
9. Utilisez-vous les meilleurs outils que vous puissiez vous payer ?
10. Avez-vous des testeurs ?
11. Les candidats écrivent-ils du code pendant leur entretien d'embauche ?
12. Faites-vous des tests d'utilisabilité de couloir ?
</small>
--
<span foreground="red">Systèmes de construction</span>

Makefile
Projet Eclipse, Visual Studio
autotools
CMake
SCons
etc.
--
<span foreground="red">Systèmes de construction</span>

aide à la configuration
debug/release
construit les artefacts
--
<span foreground="red">Meson</span>

http://mesonbuild.com
-- [text-align=left]
<span foreground="red">Meson</span>

dépendances : Ninja, python 3
= facilement déployable
--
<span foreground="red">Ninja</span>

https://ninja-build.org/
--
<span foreground="red">Ninja : buts</span>

rapidité
faire une chose, la faire bien → KISS
--
<span foreground="red">Ninja : particularités</span>

langage de description, pas de programmation
fichiers verbeux
fichiers générés
remplace <tt>make</tt> et les Makefiles
backend pour CMake
--
<span foreground="red">Ninja : utilisateurs</span>

Google Chrome
GStreamer
--
<tt>mkdir build &amp;&amp; cd build &amp;&amp; meson ..</tt>
<tt>ninja</tt>
-- [meson-conftime.png]

-- [meson-buildtime.png]

-- [meson-emptytime.png]

--
Source: https://github.com/mesonbuild/meson/wiki/Simple%20comparison
--
<span foreground="red">Meson : résultats</span>

« About 2.5x faster on Linux
and 10x faster on Windows
for building the core GStreamer repository »

(comparé aux autotools)

http://blog.nirbheek.in/2016/05/gstreamer-and-meson-new-hope.html
--
<b>Bonne pratique :</b>

Ne construire que le nécessaire
-- [toolbox.png][fill][bottom]
<span foreground="red">Trouvez vos outils</span>
-- [toolbox.png][fill][bottom]
<span foreground="red">Trouvez votre workflow</span>
--
FIN
--
Questions ?

-- [more-questions.jpg][fill]

--
Analyseurs statiques
--
*lint, deblint, pylint, coala, shellcheck
indispensable pour les langages interprétés
enseigne les bonnes pratiques
--
<span foreground='red'>Coala</span>
#--
#Licences
#
# ne pas copier/coller du code sans connaitre exactement la licence et les droits
# libre ne veut pas dire compatible
# diagramme de compatibilité de licences: https://www.dwheeler.com/essays/floss-license-slide.html
# logiciel libre et licences libres (évoquer SPDX, Creative Commons pour les resources non-code)
-- [text-align=left]
vim + git + pinpoint
vim + git + lilypond + GNU Make
vim + git + dot
--
<span foreground="red">♥ Git</span>

<tt>git rebase --interactive</tt>
--
<span foreground="red">♥ Git</span>

<tt>git commit --amend</tt>
--
<span foreground="red">♥ Git</span>

<tt>git add --patch</tt>
--
<span foreground="red">♥ Git</span>

<tt>git stash</tt>
--
<span foreground="red">♥ Git</span>

<tt>git bissect</tt>
--
<span foreground="red">♥ Git</span>

<tt>git format-patch</tt>
--
